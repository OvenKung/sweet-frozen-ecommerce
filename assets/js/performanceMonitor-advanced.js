// ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå‡πÅ‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á
class AdvancedPerformanceMonitor {
  constructor() {
    this.metrics = {
      pageLoad: {},
      userInteractions: [],
      networkRequests: [],
      memoryUsage: [],
      fps: [],
      coreWebVitals: {}
    };
    
    this.thresholds = {
      fcp: 1800,      // First Contentful Paint
      lcp: 2500,      // Largest Contentful Paint
      fid: 100,       // First Input Delay
      cls: 0.1,       // Cumulative Layout Shift
      ttfb: 600,      // Time to First Byte
      fps: 55         // Frames per Second
    };
    
    this.sessionStart = Date.now();
    this.isGitHubPages = window.location.hostname.includes('github.io');
    this.init();
  }

  init() {
    this.measurePageLoad();
    this.measureCoreWebVitals();
    this.measureUserInteractions();
    this.measureNetworkPerformance();
    this.measureMemoryUsage();
    this.measureFPS();
    this.setupErrorTracking();
    this.startRealTimeMonitoring();
  }

  // ‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
  measurePageLoad() {
    if (!window.performance) return;

    window.addEventListener('load', () => {
      const timing = performance.getEntriesByType('navigation')[0];
      
      this.metrics.pageLoad = {
        domContentLoaded: timing.domContentLoadedEventEnd - timing.domContentLoadedEventStart,
        loadComplete: timing.loadEventEnd - timing.loadEventStart,
        domInteractive: timing.domInteractive - timing.navigationStart,
        pageLoadTime: timing.loadEventEnd - timing.navigationStart,
        ttfb: timing.responseStart - timing.requestStart,
        domParsing: timing.domComplete - timing.domLoading,
        resourceLoadTime: timing.loadEventEnd - timing.domContentLoadedEventEnd,
        timestamp: Date.now()
      };

      this.analyzePageLoadPerformance();
      
      if (!this.isGitHubPages) {
        console.log('üöÄ Performance metrics:', this.metrics.pageLoad);
      }
    });
  }

  // ‡∏ß‡∏±‡∏î Core Web Vitals
  measureCoreWebVitals() {
    // First Contentful Paint
    if (window.PerformanceObserver) {
      new PerformanceObserver((entryList) => {
        for (const entry of entryList.getEntries()) {
          if (entry.name === 'first-contentful-paint') {
            this.metrics.coreWebVitals.fcp = entry.startTime;
            this.checkWebVitalThreshold('fcp', entry.startTime);
          }
        }
      }).observe({ entryTypes: ['paint'] });

      // Largest Contentful Paint
      new PerformanceObserver((entryList) => {
        const entries = entryList.getEntries();
        const lastEntry = entries[entries.length - 1];
        
        this.metrics.coreWebVitals.lcp = lastEntry.startTime;
        this.checkWebVitalThreshold('lcp', lastEntry.startTime);
      }).observe({ entryTypes: ['largest-contentful-paint'] });

      // First Input Delay
      new PerformanceObserver((entryList) => {
        for (const entry of entryList.getEntries()) {
          this.metrics.coreWebVitals.fid = entry.processingStart - entry.startTime;
          this.checkWebVitalThreshold('fid', entry.processingStart - entry.startTime);
        }
      }).observe({ entryTypes: ['first-input'] });

      // Cumulative Layout Shift
      let cumulativeLayoutShift = 0;
      new PerformanceObserver((entryList) => {
        for (const entry of entryList.getEntries()) {
          if (!entry.hadRecentInput) {
            cumulativeLayoutShift += entry.value;
          }
        }
        
        this.metrics.coreWebVitals.cls = cumulativeLayoutShift;
        this.checkWebVitalThreshold('cls', cumulativeLayoutShift);
      }).observe({ entryTypes: ['layout-shift'] });
    }
  }

  // ‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  measureUserInteractions() {
    const interactionTypes = ['click', 'scroll', 'keydown', 'touchstart'];
    
    interactionTypes.forEach(type => {
      document.addEventListener(type, (event) => {
        const startTime = performance.now();
        
        // ‡∏ß‡∏±‡∏î input delay
        requestAnimationFrame(() => {
          const inputDelay = performance.now() - startTime;
          
          this.metrics.userInteractions.push({
            type,
            target: event.target.tagName,
            delay: inputDelay,
            timestamp: Date.now(),
            x: event.clientX || 0,
            y: event.clientY || 0
          });

          // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 50 interaction ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          if (this.metrics.userInteractions.length > 50) {
            this.metrics.userInteractions.shift();
          }
        });
      }, { passive: true });
    });
  }

  // ‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
  measureNetworkPerformance() {
    if (!window.PerformanceObserver) return;

    new PerformanceObserver((list) => {
      for (const entry of list.getEntries()) {
        if (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest') {
          this.metrics.networkRequests.push({
            url: entry.name,
            duration: entry.duration,
            size: entry.transferSize,
            cached: entry.transferSize === 0 && entry.decodedBodySize > 0,
            timestamp: Date.now()
          });

          // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 30 request ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
          if (this.metrics.networkRequests.length > 30) {
            this.metrics.networkRequests.shift();
          }
        }
      }
    }).observe({ entryTypes: ['resource'] });
  }

  // ‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
  measureMemoryUsage() {
    if (!performance.memory) return;

    const measureMemory = () => {
      this.metrics.memoryUsage.push({
        used: Math.round(performance.memory.usedJSHeapSize / 1048576), // MB
        total: Math.round(performance.memory.totalJSHeapSize / 1048576), // MB
        limit: Math.round(performance.memory.jsHeapSizeLimit / 1048576), // MB
        timestamp: Date.now()
      });

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 20 ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      if (this.metrics.memoryUsage.length > 20) {
        this.metrics.memoryUsage.shift();
      }
    };

    measureMemory();
    setInterval(measureMemory, 10000); // ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  }

  // ‡∏ß‡∏±‡∏î‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏ü‡∏£‡∏° (FPS)
  measureFPS() {
    let lastTime = performance.now();
    let frameCount = 0;

    const measureFrame = (currentTime) => {
      frameCount++;
      
      if (currentTime - lastTime >= 1000) {
        const fps = Math.round((frameCount * 1000) / (currentTime - lastTime));
        
        this.metrics.fps.push({
          fps,
          timestamp: Date.now()
        });

        if (fps < this.thresholds.fps) {
          this.reportLowFPS(fps);
        }

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if (this.metrics.fps.length > 30) {
          this.metrics.fps.shift();
        }

        frameCount = 0;
        lastTime = currentTime;
      }

      requestAnimationFrame(measureFrame);
    };

    requestAnimationFrame(measureFrame);
  }

  // ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  setupErrorTracking() {
    window.addEventListener('error', (event) => {
      this.reportError('JavaScript Error', {
        message: event.message,
        filename: event.filename,
        line: event.lineno,
        column: event.colno,
        stack: event.error ? event.error.stack : 'No stack trace'
      });
    });

    window.addEventListener('unhandledrejection', (event) => {
      this.reportError('Unhandled Promise Rejection', {
        reason: event.reason,
        promise: event.promise
      });
    });
  }

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  startRealTimeMonitoring() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    setInterval(() => {
      this.generatePerformanceReport();
      this.checkPerformanceIssues();
    }, 30000);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤
    window.addEventListener('beforeunload', () => {
      this.sendFinalReport();
    });
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå Core Web Vitals
  checkWebVitalThreshold(metric, value) {
    const threshold = this.thresholds[metric];
    const status = value <= threshold ? '‡∏î‡∏µ' : value <= threshold * 1.5 ? '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á' : '‡πÅ‡∏¢‡πà';
    
    if (status !== '‡∏î‡∏µ' && !this.isGitHubPages) {
      this.showPerformanceWarning(metric, value, status);
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
  showPerformanceWarning(metric, value, status) {
    const warnings = {
      fcp: '‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
      lcp: '‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
      fid: '‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
      cls: '‡πÄ‡∏•‡∏¢‡πå‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
      ttfb: '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ'
    };

    console.warn(`üö® ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ${status}: ${warnings[metric]} (${Math.round(value)}${metric === 'cls' ? '' : 'ms'})`);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö developer mode
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      this.showDevNotification(`‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ${metric.toUpperCase()}: ${status}`, `‡∏Ñ‡πà‡∏≤: ${Math.round(value)}${metric === 'cls' ? '' : 'ms'}`);
    }
  }

  // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô FPS ‡∏ï‡πà‡∏≥
  reportLowFPS(fps) {
    if (!this.isGitHubPages) {
      console.warn(`üé¨ FPS ‡∏ï‡πà‡∏≥: ${fps} fps (‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${this.thresholds.fps}+ fps)`);
    }
    
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      this.showDevNotification('FPS ‡∏ï‡πà‡∏≥', `${fps} fps - ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏°‡πà‡∏•‡∏∑‡πà‡∏ô`);
    }
  }

  // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  reportError(type, details) {
    if (!this.isGitHubPages) {
      console.error(`üö® ${type}:`, details);
    }
    
    // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡πà‡∏ô
    if (this.isGitHubPages) {
      this.sendErrorReport(type, details);
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö developer
  showDevNotification(title, message) {
    const notification = document.createElement('div');
    notification.className = 'dev-notification fixed top-16 right-4 bg-yellow-500 text-black p-3 rounded-lg shadow-lg z-50 max-w-sm animate-slide-in-right';
    notification.innerHTML = `
      <div class="flex items-start space-x-2">
        <div class="text-yellow-800">‚ö†Ô∏è</div>
        <div class="flex-1">
          <div class="font-bold text-xs">${title}</div>
          <div class="text-xs mt-1">${message}</div>
        </div>
        <button class="text-yellow-800 hover:text-yellow-900 close-dev-notification">
          <i class="fas fa-times text-xs"></i>
        </button>
      </div>
    `;

    notification.querySelector('.close-dev-notification').addEventListener('click', () => {
      notification.remove();
    });

    document.body.appendChild(notification);

    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove();
      }
    }, 5000);
  }

  // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
  analyzePageLoadPerformance() {
    const { pageLoadTime, ttfb, domParsing } = this.metrics.pageLoad;
    
    let recommendations = [];
    
    if (ttfb > this.thresholds.ttfb) {
      recommendations.push('üöÄ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ CDN');
    }
    
    if (domParsing > 500) {
      recommendations.push('üìù ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î HTML ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡πâ‡∏≤‡∏¢ JavaScript ‡πÑ‡∏õ‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤');
    }
    
    if (pageLoadTime > 3000) {
      recommendations.push('‚ö° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå');
    }

    if (recommendations.length > 0 && !this.isGitHubPages) {
      console.log('üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û:', recommendations);
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
  checkPerformanceIssues() {
    const currentMemory = this.metrics.memoryUsage[this.metrics.memoryUsage.length - 1];
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
    if (currentMemory && currentMemory.used > 100 && !this.isGitHubPages) {
      console.warn(`üß† ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡∏™‡∏π‡∏á: ${currentMemory.used}MB`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Network requests ‡∏ó‡∏µ‡πà‡∏ä‡πâ‡∏≤
    const slowRequests = this.metrics.networkRequests.filter(req => req.duration > 1000);
    if (slowRequests.length > 0 && !this.isGitHubPages) {
      console.warn(`üåê Network requests ‡∏ä‡πâ‡∏≤: ${slowRequests.length} requests`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ä‡πâ‡∏≤
    const slowInteractions = this.metrics.userInteractions.filter(interaction => interaction.delay > 16);
    if (slowInteractions.length > 5 && !this.isGitHubPages) {
      console.warn(`üëÜ ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ä‡πâ‡∏≤: ${slowInteractions.length} interactions`);
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
  generatePerformanceReport() {
    const report = {
      timestamp: Date.now(),
      pageLoad: this.metrics.pageLoad,
      coreWebVitals: this.metrics.coreWebVitals,
      averageFPS: this.calculateAverageFPS(),
      memoryTrend: this.calculateMemoryTrend(),
      networkSummary: this.calculateNetworkSummary(),
      userEngagement: this.calculateUserEngagement()
    };

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
    this.storeReport(report);

    return report;
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì FPS ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
  calculateAverageFPS() {
    if (this.metrics.fps.length === 0) return 0;
    
    const sum = this.metrics.fps.reduce((total, frame) => total + frame.fps, 0);
    return Math.round(sum / this.metrics.fps.length);
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥
  calculateMemoryTrend() {
    if (this.metrics.memoryUsage.length < 2) return 'stable';
    
    const recent = this.metrics.memoryUsage.slice(-5);
    const trend = recent[recent.length - 1].used - recent[0].used;
    
    if (trend > 10) return 'increasing';
    if (trend < -10) return 'decreasing';
    return 'stable';
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
  calculateNetworkSummary() {
    if (this.metrics.networkRequests.length === 0) return {};

    const totalRequests = this.metrics.networkRequests.length;
    const totalDuration = this.metrics.networkRequests.reduce((sum, req) => sum + req.duration, 0);
    const cachedRequests = this.metrics.networkRequests.filter(req => req.cached).length;

    return {
      totalRequests,
      averageDuration: Math.round(totalDuration / totalRequests),
      cacheHitRate: Math.round((cachedRequests / totalRequests) * 100)
    };
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  calculateUserEngagement() {
    const totalInteractions = this.metrics.userInteractions.length;
    const interactionTypes = {};
    
    this.metrics.userInteractions.forEach(interaction => {
      interactionTypes[interaction.type] = (interactionTypes[interaction.type] || 0) + 1;
    });

    return {
      totalInteractions,
      interactionTypes,
      averageDelay: this.metrics.userInteractions.length > 0 
        ? Math.round(this.metrics.userInteractions.reduce((sum, i) => sum + i.delay, 0) / this.metrics.userInteractions.length)
        : 0
    };
  }

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô
  storeReport(report) {
    try {
      const reports = JSON.parse(localStorage.getItem('performance-reports') || '[]');
      reports.push(report);
      
      // ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 10 ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      if (reports.length > 10) {
        reports.shift();
      }
      
      localStorage.setItem('performance-reports', JSON.stringify(reports));
    } catch (error) {
      if (!this.isGitHubPages) {
        console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ:', error);
      }
    }
  }

  // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
  sendFinalReport() {
    const finalReport = this.generatePerformanceReport();
    finalReport.sessionDuration = Date.now() - this.sessionStart;
    
    // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ sendBeacon ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡∏î‡∏±‡∏Å‡∏ä‡∏±‡πà‡∏ô)
    if (navigator.sendBeacon && this.isGitHubPages) {
      const reportData = JSON.stringify(finalReport);
      // navigator.sendBeacon('/api/performance', reportData);
    }
  }

  // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  sendErrorReport(type, details) {
    const errorReport = {
      type,
      details,
      userAgent: navigator.userAgent,
      url: window.location.href,
      timestamp: Date.now()
    };

    if (navigator.sendBeacon && this.isGitHubPages) {
      const reportData = JSON.stringify(errorReport);
      // navigator.sendBeacon('/api/errors', reportData);
    }
  }

  // ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging)
  getReports() {
    try {
      return JSON.parse(localStorage.getItem('performance-reports') || '[]');
    } catch (error) {
      if (!this.isGitHubPages) {
        console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ:', error);
      }
      return [];
    }
  }

  // ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  clearReports() {
    localStorage.removeItem('performance-reports');
    if (!this.isGitHubPages) {
      console.log('‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
    }
  }

  // Backward compatibility methods
  recordMetric(name, value) {
    if (!this.isGitHubPages) {
      console.log(`üìä Performance: ${name} = ${value.toFixed ? value.toFixed(2) : value}${typeof value === 'number' ? 'ms' : ''}`);
    }
  }

  checkWebVitals() {
    // Compatibility method for existing code
    if (!this.isGitHubPages) {
      console.log('üåê Web Vitals monitoring active');
    }
  }

  monitorResources() {
    // Compatibility method for existing code
    if (!this.isGitHubPages) {
      console.log('üì¶ Resource monitoring active');
    }
  }

  generateReport() {
    return this.generatePerformanceReport();
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
const performanceMonitor = new AdvancedPerformanceMonitor();

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô
window.performanceMonitor = performanceMonitor;

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö developer console
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
  window.perf = {
    reports: () => performanceMonitor.getReports(),
    clear: () => performanceMonitor.clearReports(),
    current: () => performanceMonitor.metrics
  };
  
  console.log('üîß Developer tools ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:');
  console.log('- perf.reports() - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û');
  console.log('- perf.clear() - ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
  console.log('- perf.current() - ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
}

// Helper functions
window.getPerformanceReport = () => window.sweetFrozenPerf.getReport();
window.checkMemory = () => window.sweetFrozenPerf.checkMemoryUsage();

export default PerformanceMonitor;
